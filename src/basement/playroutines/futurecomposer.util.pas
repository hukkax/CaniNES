unit FutureComposer.Util;

interface

type
	TByteArray = array of Byte;

	// hacks to allow pointer maths on data
	TArrayOfByte 		= array [0..65535] of Byte;
	TArrayOfSmallInt 	= array [0..65535] of SmallInt;
	TArrayOfShortInt 	= array [0..65535] of ShortInt;
	TArrayOfCardinal	= array [0..65535] of Cardinal;
	TArrayOfSingle 		= array [0..65535] of Single;

	PArrayOfByte		= ^TArrayOfByte;
	PArrayOfSmallInt 	= ^TArrayOfSmallInt;
	PArrayOfShortInt	= ^TArrayOfShortInt;
	PArrayOfSingle 		= ^TArrayOfSingle;
	PArrayOfCardinal	= ^TArrayOfCardinal;


const
	periods: array [0..127] of Word = (
		$06B0, $0650, $05F4, $05A0, $054C, $0500, $04B8, $0474,
		$0434, $03F8, $03C0, $038A, $0358, $0328, $02FA, $02D0,
		$02A6, $0280, $025C, $023A, $021A, $01FC, $01E0, $01C5,
		$01AC, $0194, $017D, $0168, $0153, $0140, $012E, $011D,
		$010D, $00FE, $00F0, $00E2, $00D6, $00CA, $00BE, $00B4,
		$00AA, $00A0, $0097, $008F, $0087, $007F, $0078, $0071,
		$0071, $0071, $0071, $0071, $0071, $0071, $0071, $0071,
		$0071, $0071, $0071, $0071, $0D60, $0CA0, $0BE8, $0B40,
		$0A98, $0A00, $0970, $08E8, $0868, $07F0, $0780, $0714,
		$06B0, $0650, $05F4, $05A0, $054C, $0500, $04B8, $0474,
		$0434, $03F8, $03C0, $038A, $0358, $0328, $02FA, $02D0,
		$02A6, $0280, $025C, $023A, $021A, $01FC, $01E0, $01C5,
		$01AC, $0194, $017D, $0168, $0153, $0140, $012E, $011D,
		$010D, $00FE, $00F0, $00E2, $00D6, $00CA, $00BE, $00B4,
		$00AA, $00A0, $0097, $008F, $0087, $007F, $0078, $0071,
		$0071, $0071, $0071, $0071, $0071, $0071, $0071, $0071
	);

	silentTable: array [0..7] of Byte = (
		$01, $00, $00, $00, $00, $00, $00, $E1
	);

	// used by pre-1.4 modules
	//
	waveformDatas: array[0..1343] of Byte = (
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$3F,$37,$2F,$27,$1F,$17,$0F,$07,$FF,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$37,$2F,$27,$1F,$17,$0F,$07,$FF,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$2F,$27,$1F,$17,$0F,$07,$FF,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$27,$1F,$17,$0F,$07,$FF,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$1F,$17,$0F,$07,$FF,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$17,$0F,$07,$FF,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$0F,$07,$FF,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$90,$07,$FF,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$FF,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$80,$07,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$80,$88,$0F,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$80,$88,$90,$17,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$80,$88,$90,$98,$1F,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$80,$88,$90,$98,$A0,$27,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$80,$88,$90,$98,$A0,$A8,$2F,$37,
		$C0,$C0,$D0,$D8,$E0,$E8,$F0,$F8,$00,$F8,$F0,$E8,$E0,$D8,$D0,$C8,
		$C0,$B8,$B0,$A8,$A0,$98,$90,$88,$80,$88,$90,$98,$A0,$A8,$B0,$37,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$81,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$81,$81,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$81,$81,$81,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$81,$81,$81,$81,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$7F,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$7F,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$7F,$7F,$7F,$7F,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,
		$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$81,$7F,$7F,$7F,
		$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,
		$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$7F,$7F,
		$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,
		$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$7F,
		$80,$80,$80,$80,$80,$80,$80,$80,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$80,$80,$80,$80,$80,$80,$80,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$80,$80,$80,$80,$80,$80,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$80,$80,$80,$80,$80,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$80,$80,$80,$80,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$80,$80,$80,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$80,$80,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$80,$80,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,$7F,
		$80,$80,$90,$98,$A0,$A8,$B0,$B8,$C0,$C8,$D0,$D8,$E0,$E8,$F0,$F8,
		$00,$08,$10,$18,$20,$28,$30,$38,$40,$48,$50,$58,$60,$68,$70,$7F,
		$80,$80,$A0,$B0,$C0,$D0,$E0,$F0,$00,$10,$20,$30,$40,$50,$60,$70,
		$45,$45,$79,$7D,$7A,$77,$70,$66,$61,$58,$53,$4D,$2C,$20,$18,$12,
		$04,$DB,$D3,$CD,$C6,$BC,$B5,$AE,$A8,$A3,$9D,$99,$93,$8E,$8B,$8A,
		$45,$45,$79,$7D,$7A,$77,$70,$66,$5B,$4B,$43,$37,$2C,$20,$18,$12,
		$04,$F8,$E8,$DB,$CF,$C6,$BE,$B0,$A8,$A4,$9E,$9A,$95,$94,$8D,$83,
		$00,$00,$40,$60,$7F,$60,$40,$20,$00,$E0,$C0,$A0,$80,$A0,$C0,$E0,
		$00,$00,$40,$60,$7F,$60,$40,$20,$00,$E0,$C0,$A0,$80,$A0,$C0,$E0,
		$80,$80,$90,$98,$A0,$A8,$B0,$B8,$C0,$C8,$D0,$D8,$E0,$E8,$F0,$F8,
		$00,$08,$10,$18,$20,$28,$30,$38,$40,$48,$50,$58,$60,$68,$70,$7F,
		$80,$80,$A0,$B0,$C0,$D0,$E0,$F0,$00,$10,$20,$30,$40,$50,$60,$70
	);

	waveformLengths: array[0..46] of Byte = (
		$10, $10, $10, $10, $10, $10, $10, $10, $10, $10,
		$10, $10, $10, $10, $10, $10, $10, $10, $10, $10,
		$10, $10, $10, $10, $10, $10, $10, $10, $10, $10,
		$10, $10, $08, $08, $08, $08, $08, $08, $08, $08,
		$10, $08, $10, $10, $08, $08, $18
	);



	function CLAMP(const x, low, high: Integer): Integer; inline;
	function GetPtr16(const S: PArrayOfByte): Word;
	function GetPtr32(const S: PArrayOfByte): Cardinal;


implementation


function CLAMP(const x, low, high: Integer): Integer;
begin
	if (x > high) then
		Result := high
	else
		if x < low then
			Result := low
		else
			Result := x;
end;

function GetPtr16(const S: PArrayOfByte): Word;
begin
	Result := (S[0] shl 8) + S[1];
end;

function GetPtr32(const S: PArrayOfByte): Cardinal;
begin
	Result := (S[0] shl 24) + (S[1] shl 16) + (S[2] shl 8) + S[3];
end;


end.
